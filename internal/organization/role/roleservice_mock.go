// Code generated by mockery. DO NOT EDIT.

package role

import (
	context "context"

	components "github.com/Kong/sdk-konnect-go/models/components"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
)

// MockRoleService is an autogenerated mock type for the RoleService type
type MockRoleService struct {
	mock.Mock
}

type MockRoleService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoleService) EXPECT() *MockRoleService_Expecter {
	return &MockRoleService_Expecter{mock: &_m.Mock}
}

// GetPredefinedRoles provides a mock function with given fields: ctx, opts
func (_m *MockRoleService) GetPredefinedRoles(ctx context.Context, opts ...operations.Option) (*operations.GetPredefinedRolesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPredefinedRoles")
	}

	var r0 *operations.GetPredefinedRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...operations.Option) (*operations.GetPredefinedRolesResponse, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...operations.Option) *operations.GetPredefinedRolesResponse); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetPredefinedRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...operations.Option) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleService_GetPredefinedRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPredefinedRoles'
type MockRoleService_GetPredefinedRoles_Call struct {
	*mock.Call
}

// GetPredefinedRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...operations.Option
func (_e *MockRoleService_Expecter) GetPredefinedRoles(ctx interface{}, opts ...interface{}) *MockRoleService_GetPredefinedRoles_Call {
	return &MockRoleService_GetPredefinedRoles_Call{Call: _e.mock.On("GetPredefinedRoles",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRoleService_GetPredefinedRoles_Call) Run(run func(ctx context.Context, opts ...operations.Option)) *MockRoleService_GetPredefinedRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRoleService_GetPredefinedRoles_Call) Return(_a0 *operations.GetPredefinedRolesResponse, _a1 error) *MockRoleService_GetPredefinedRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleService_GetPredefinedRoles_Call) RunAndReturn(run func(context.Context, ...operations.Option) (*operations.GetPredefinedRolesResponse, error)) *MockRoleService_GetPredefinedRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamRoles provides a mock function with given fields: ctx, teamID, filter, opts
func (_m *MockRoleService) ListTeamRoles(ctx context.Context, teamID string, filter *operations.ListTeamRolesQueryParamFilter, opts ...operations.Option) (*operations.ListTeamRolesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamID, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamRoles")
	}

	var r0 *operations.ListTeamRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *operations.ListTeamRolesQueryParamFilter, ...operations.Option) (*operations.ListTeamRolesResponse, error)); ok {
		return rf(ctx, teamID, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *operations.ListTeamRolesQueryParamFilter, ...operations.Option) *operations.ListTeamRolesResponse); ok {
		r0 = rf(ctx, teamID, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListTeamRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *operations.ListTeamRolesQueryParamFilter, ...operations.Option) error); ok {
		r1 = rf(ctx, teamID, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleService_ListTeamRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamRoles'
type MockRoleService_ListTeamRoles_Call struct {
	*mock.Call
}

// ListTeamRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID string
//   - filter *operations.ListTeamRolesQueryParamFilter
//   - opts ...operations.Option
func (_e *MockRoleService_Expecter) ListTeamRoles(ctx interface{}, teamID interface{}, filter interface{}, opts ...interface{}) *MockRoleService_ListTeamRoles_Call {
	return &MockRoleService_ListTeamRoles_Call{Call: _e.mock.On("ListTeamRoles",
		append([]interface{}{ctx, teamID, filter}, opts...)...)}
}

func (_c *MockRoleService_ListTeamRoles_Call) Run(run func(ctx context.Context, teamID string, filter *operations.ListTeamRolesQueryParamFilter, opts ...operations.Option)) *MockRoleService_ListTeamRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*operations.ListTeamRolesQueryParamFilter), variadicArgs...)
	})
	return _c
}

func (_c *MockRoleService_ListTeamRoles_Call) Return(_a0 *operations.ListTeamRolesResponse, _a1 error) *MockRoleService_ListTeamRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleService_ListTeamRoles_Call) RunAndReturn(run func(context.Context, string, *operations.ListTeamRolesQueryParamFilter, ...operations.Option) (*operations.ListTeamRolesResponse, error)) *MockRoleService_ListTeamRoles_Call {
	_c.Call.Return(run)
	return _c
}

// TeamsAssignRole provides a mock function with given fields: ctx, teamID, assignRole, opts
func (_m *MockRoleService) TeamsAssignRole(ctx context.Context, teamID string, assignRole *components.AssignRole, opts ...operations.Option) (*operations.TeamsAssignRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamID, assignRole)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TeamsAssignRole")
	}

	var r0 *operations.TeamsAssignRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *components.AssignRole, ...operations.Option) (*operations.TeamsAssignRoleResponse, error)); ok {
		return rf(ctx, teamID, assignRole, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *components.AssignRole, ...operations.Option) *operations.TeamsAssignRoleResponse); ok {
		r0 = rf(ctx, teamID, assignRole, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.TeamsAssignRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *components.AssignRole, ...operations.Option) error); ok {
		r1 = rf(ctx, teamID, assignRole, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoleService_TeamsAssignRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamsAssignRole'
type MockRoleService_TeamsAssignRole_Call struct {
	*mock.Call
}

// TeamsAssignRole is a helper method to define mock.On call
//   - ctx context.Context
//   - teamID string
//   - assignRole *components.AssignRole
//   - opts ...operations.Option
func (_e *MockRoleService_Expecter) TeamsAssignRole(ctx interface{}, teamID interface{}, assignRole interface{}, opts ...interface{}) *MockRoleService_TeamsAssignRole_Call {
	return &MockRoleService_TeamsAssignRole_Call{Call: _e.mock.On("TeamsAssignRole",
		append([]interface{}{ctx, teamID, assignRole}, opts...)...)}
}

func (_c *MockRoleService_TeamsAssignRole_Call) Run(run func(ctx context.Context, teamID string, assignRole *components.AssignRole, opts ...operations.Option)) *MockRoleService_TeamsAssignRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*components.AssignRole), variadicArgs...)
	})
	return _c
}

func (_c *MockRoleService_TeamsAssignRole_Call) Return(_a0 *operations.TeamsAssignRoleResponse, _a1 error) *MockRoleService_TeamsAssignRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleService_TeamsAssignRole_Call) RunAndReturn(run func(context.Context, string, *components.AssignRole, ...operations.Option) (*operations.TeamsAssignRoleResponse, error)) *MockRoleService_TeamsAssignRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRoleService creates a new instance of MockRoleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoleService {
	mock := &MockRoleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
