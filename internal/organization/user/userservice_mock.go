// Code generated by mockery. DO NOT EDIT.

package user

import (
	context "context"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// ListUsers provides a mock function with given fields: ctx, request, opts
func (_m *MockUserService) ListUsers(ctx context.Context, request operations.ListUsersRequest, opts ...operations.Option) (*operations.ListUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *operations.ListUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, operations.ListUsersRequest, ...operations.Option) (*operations.ListUsersResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, operations.ListUsersRequest, ...operations.Option) *operations.ListUsersResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, operations.ListUsersRequest, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockUserService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListUsersRequest
//   - opts ...operations.Option
func (_e *MockUserService_Expecter) ListUsers(ctx interface{}, request interface{}, opts ...interface{}) *MockUserService_ListUsers_Call {
	return &MockUserService_ListUsers_Call{Call: _e.mock.On("ListUsers",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockUserService_ListUsers_Call) Run(run func(ctx context.Context, request operations.ListUsersRequest, opts ...operations.Option)) *MockUserService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(operations.ListUsersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserService_ListUsers_Call) Return(_a0 *operations.ListUsersResponse, _a1 error) *MockUserService_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_ListUsers_Call) RunAndReturn(run func(context.Context, operations.ListUsersRequest, ...operations.Option) (*operations.ListUsersResponse, error)) *MockUserService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
