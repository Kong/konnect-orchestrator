// Code generated by mockery. DO NOT EDIT.

package user

import (
	context "context"

	components "github.com/Kong/sdk-konnect-go/models/components"

	mock "github.com/stretchr/testify/mock"

	operations "github.com/Kong/sdk-konnect-go/models/operations"
)

// MockInviteService is an autogenerated mock type for the InviteService type
type MockInviteService struct {
	mock.Mock
}

type MockInviteService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInviteService) EXPECT() *MockInviteService_Expecter {
	return &MockInviteService_Expecter{mock: &_m.Mock}
}

// InviteUser provides a mock function with given fields: ctx, request, opts
func (_m *MockInviteService) InviteUser(ctx context.Context, request *components.InviteUser, opts ...operations.Option) (*operations.InviteUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, request)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InviteUser")
	}

	var r0 *operations.InviteUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *components.InviteUser, ...operations.Option) (*operations.InviteUserResponse, error)); ok {
		return rf(ctx, request, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *components.InviteUser, ...operations.Option) *operations.InviteUserResponse); ok {
		r0 = rf(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.InviteUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *components.InviteUser, ...operations.Option) error); ok {
		r1 = rf(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInviteService_InviteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteUser'
type MockInviteService_InviteUser_Call struct {
	*mock.Call
}

// InviteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request *components.InviteUser
//   - opts ...operations.Option
func (_e *MockInviteService_Expecter) InviteUser(ctx interface{}, request interface{}, opts ...interface{}) *MockInviteService_InviteUser_Call {
	return &MockInviteService_InviteUser_Call{Call: _e.mock.On("InviteUser",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockInviteService_InviteUser_Call) Run(run func(ctx context.Context, request *components.InviteUser, opts ...operations.Option)) *MockInviteService_InviteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(operations.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*components.InviteUser), variadicArgs...)
	})
	return _c
}

func (_c *MockInviteService_InviteUser_Call) Return(_a0 *operations.InviteUserResponse, _a1 error) *MockInviteService_InviteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInviteService_InviteUser_Call) RunAndReturn(run func(context.Context, *components.InviteUser, ...operations.Option) (*operations.InviteUserResponse, error)) *MockInviteService_InviteUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInviteService creates a new instance of MockInviteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInviteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInviteService {
	mock := &MockInviteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
