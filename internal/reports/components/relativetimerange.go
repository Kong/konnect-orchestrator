// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeRelative Type = "relative"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relative":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// RelativeTimeRangeTimeRange - Query data from the specified period relative to now.
type RelativeTimeRangeTimeRange string

const (
	RelativeTimeRangeTimeRangeFifteenm      RelativeTimeRangeTimeRange = "15m"
	RelativeTimeRangeTimeRangeOneh          RelativeTimeRangeTimeRange = "1h"
	RelativeTimeRangeTimeRangeSixh          RelativeTimeRangeTimeRange = "6h"
	RelativeTimeRangeTimeRangeTwelveh       RelativeTimeRangeTimeRange = "12h"
	RelativeTimeRangeTimeRangeTwentyFourh   RelativeTimeRangeTimeRange = "24h"
	RelativeTimeRangeTimeRangeSevend        RelativeTimeRangeTimeRange = "7d"
	RelativeTimeRangeTimeRangeCurrentWeek   RelativeTimeRangeTimeRange = "current_week"
	RelativeTimeRangeTimeRangePreviousWeek  RelativeTimeRangeTimeRange = "previous_week"
	RelativeTimeRangeTimeRangeThirtyd       RelativeTimeRangeTimeRange = "30d"
	RelativeTimeRangeTimeRangeCurrentMonth  RelativeTimeRangeTimeRange = "current_month"
	RelativeTimeRangeTimeRangePreviousMonth RelativeTimeRangeTimeRange = "previous_month"
)

func (e RelativeTimeRangeTimeRange) ToPointer() *RelativeTimeRangeTimeRange {
	return &e
}
func (e *RelativeTimeRangeTimeRange) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "15m":
		fallthrough
	case "1h":
		fallthrough
	case "6h":
		fallthrough
	case "12h":
		fallthrough
	case "24h":
		fallthrough
	case "7d":
		fallthrough
	case "current_week":
		fallthrough
	case "previous_week":
		fallthrough
	case "30d":
		fallthrough
	case "current_month":
		fallthrough
	case "previous_month":
		*e = RelativeTimeRangeTimeRange(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelativeTimeRangeTimeRange: %v", v)
	}
}

type RelativeTimeRange struct {
	Type Type `json:"type"`
	// Query data from the specified period relative to now.
	TimeRange RelativeTimeRangeTimeRange `json:"time_range"`
}

func (o *RelativeTimeRange) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *RelativeTimeRange) GetTimeRange() RelativeTimeRangeTimeRange {
	if o == nil {
		return RelativeTimeRangeTimeRange("")
	}
	return o.TimeRange
}
