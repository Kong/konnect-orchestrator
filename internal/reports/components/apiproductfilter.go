// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Dimension - The dimension to filter.
type Dimension string

const (
	DimensionAPIProduct Dimension = "API_PRODUCT"
)

func (e Dimension) ToPointer() *Dimension {
	return &e
}
func (e *Dimension) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API_PRODUCT":
		*e = Dimension(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dimension: %v", v)
	}
}

type APIProductFilter struct {
	// The dimension to filter.
	Dimension Dimension `json:"dimension"`
	// The type of filter to apply.  `IN` filters will limit results to only the specified values, while `NOT_IN` filters will exclude the specified values.
	Type FilterType `json:"type"`
	// The UUIDs of the API products to include in the results.
	//
	Values []string `json:"values"`
}

func (o *APIProductFilter) GetDimension() Dimension {
	if o == nil {
		return Dimension("")
	}
	return o.Dimension
}

func (o *APIProductFilter) GetType() FilterType {
	if o == nil {
		return FilterType("")
	}
	return o.Type
}

func (o *APIProductFilter) GetValues() []string {
	if o == nil {
		return []string{}
	}
	return o.Values
}