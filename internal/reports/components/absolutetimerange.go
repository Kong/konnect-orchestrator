// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/Kong/konnect-orchestrator/internal/reports/utils"
	"github.com/Kong/sdk-konnect-go-internal/types"
)

type AbsoluteTimeRangeType string

const (
	AbsoluteTimeRangeTypeAbsolute AbsoluteTimeRangeType = "absolute"
)

func (e AbsoluteTimeRangeType) ToPointer() *AbsoluteTimeRangeType {
	return &e
}
func (e *AbsoluteTimeRangeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "absolute":
		*e = AbsoluteTimeRangeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AbsoluteTimeRangeType: %v", v)
	}
}

type AbsoluteTimeRange struct {
	Type AbsoluteTimeRangeType `json:"type"`
	// An ISO-8601 date value specifying the lower bound of the time range, inclusive.
	Start types.Date `json:"start"`
	// An ISO-8601 date value specifying the upper bound of the time range, inclusive.
	End types.Date `json:"end"`
}

func (a AbsoluteTimeRange) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbsoluteTimeRange) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AbsoluteTimeRange) GetType() AbsoluteTimeRangeType {
	if o == nil {
		return AbsoluteTimeRangeType("")
	}
	return o.Type
}

func (o *AbsoluteTimeRange) GetStart() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.Start
}

func (o *AbsoluteTimeRange) GetEnd() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.End
}
