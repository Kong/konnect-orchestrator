// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// GatewayServiceFilterDimension - The dimension to filter.
type GatewayServiceFilterDimension string

const (
	GatewayServiceFilterDimensionGatewayService GatewayServiceFilterDimension = "GATEWAY_SERVICE"
)

func (e GatewayServiceFilterDimension) ToPointer() *GatewayServiceFilterDimension {
	return &e
}
func (e *GatewayServiceFilterDimension) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GATEWAY_SERVICE":
		*e = GatewayServiceFilterDimension(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GatewayServiceFilterDimension: %v", v)
	}
}

type GatewayServiceFilter struct {
	// The dimension to filter.
	Dimension GatewayServiceFilterDimension `json:"dimension"`
	// The type of filter to apply.  `IN` filters will limit results to only the specified values, while `NOT_IN` filters will exclude the specified values.
	Type FilterType `json:"type"`
	// The gateway services to include in the results.  Because gateway service UUIDs are only unique within a given control plane, the filter values must be in the form "[control plane UUID]:[service UUID]".
	//
	Values []string `json:"values"`
}

func (o *GatewayServiceFilter) GetDimension() GatewayServiceFilterDimension {
	if o == nil {
		return GatewayServiceFilterDimension("")
	}
	return o.Dimension
}

func (o *GatewayServiceFilter) GetType() FilterType {
	if o == nil {
		return FilterType("")
	}
	return o.Type
}

func (o *GatewayServiceFilter) GetValues() []string {
	if o == nil {
		return []string{}
	}
	return o.Values
}